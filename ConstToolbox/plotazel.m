function p_handle = plotazel(az,el,prn,mask,plot_title,spoke_label)

% p_handle = plotazel(az,el,prn,mask,plot_title,spoke_label);
%
% Function to plot the trajectories on a polar azimuth/elevation plot
% for a single observer. Each arc generated by a satellite is colored and
% labeled with the prn number. This function will use the current figure
% if one is available. Otherwise, a figure will be created. Zoom 
% capability is added to the figure. See help on ZOOM for more information.
% Starting points are not labeled and end points are labeled 
% with 'x'. 
%
% Input:
%   az          - azimuth (-2*pi to 2*pi rad) (nx1)
%   el          - elevation (-pi/2 to pi/2 rad) (nx1)
%   prn         - satellite number corresponding to each az/el pair, 
%                 nx1 (optional), if not provided, one az/el track is drawn 
%                 assuming one satellite
%   mask        - observer elevation mask as a function of azimuth (rad) 
%                 (1x1 or mx3) (optional) default = [0 0 2*pi], see help on 
%                 MASK_VIS for more detail about mask parameters
%   plot_title  - title of plot (1xm string) (optional) default = 'Sky Plot'
%   spoke_label - labels for the North, East, South,and West spokes of the 
%                 plot. (4xn string) (optional).  
%                 default = str2mat('N','E','S','W')
% Output:
%   p_handle    - graphics handle to the figure
%
% See also PLOTAZ, PLOTEL, PLOTAZEL, NED2AZEL, ECEF2NED

% Written by: Jimmy LaMance 11/7/96
% Copyright (c) 1998 by Constell, Inc.

% functions called: PLOTPOLR, MASK_VIS

%%%%% BEGIN VARIABLE CHECKING CODE %%%%%
% declare the global debug variable
global DEBUG_MODE

% Initialize the output variables
p_handle=[];

% Check the number of input arguments and issues a message if invalid
msg = nargchk(2,6,nargin);
if ~isempty(msg)
  fprintf('%s  See help on PLOTAZEL for details.\n',msg);
  fprintf('Returning with empty outputs.\n\n');
  return
end

% check that the size of the prn input is valid, if provided
if nargin < 3
  prn = zeros(size(az,1),1);
end % if nargin < 3
% check that the size of mask is valid         
if nargin < 4,
  mask = 0;
end % if nargin < 4
% Check to make sure the title string is a valid size
if nargin < 5,
  plot_title = ['Azimuth Plot'];
end % if nargin == 5
if nargin < 6
  spoke_label = str2mat('N','E','S','W');
end % if nargin >= 6

% Get the current Matlab version
matlab_version = version;
matlab_version = str2num(matlab_version(1));

% If the Matlab version is 5.x and the DEBUG_MODE flag is not set
% then set up the error checking structure and call the error routine.
if matlab_version >= 5.0                        
  estruct.func_name = 'PLOTAZEL';

  % Develop the error checking structure with required dimension, matching
  % dinemsion flags, and input dinemsions.
  estruct.variable(1).name = 'az';
  estruct.variable(1).req_dim = [901 1];
  estruct.variable(1).var = az;
  
  estruct.variable(2).name = 'el';
  estruct.variable(2).req_dim = [901 1];
  estruct.variable(2).var = el;
  
  estruct.variable(3).name = 'prn';
  estruct.variable(3).req_dim = [901 1];
  estruct.variable(3).var = prn;
  
  estruct.variable(4).name = 'mask';
  estruct.variable(4).req_dim = [1 1; 902 3; 902 4];
  estruct.variable(4).var = mask;
  
  % Call the error checking function
  stop_flag = err_chk(estruct);
  
  if stop_flag == 1           
    fprintf('Invalid inputs to %s.  Returning with empty outputs.\n\n', ...
             estruct.func_name);
    return
  end % if stop_flag == 1
end % if matlab_version >= 5.0 & isempty(DEBUG_MODE) 

%%%%% END VARIABLE CHECKING CODE %%%%%

%%%%% BEGIN ALGORITHM CODE %%%%%

% compute the mask_vis for use in the sky plot 
I_vis = mask_vis(az, el, mask);
if ~any(I_vis), % there are no visible satellites
  fprintf('\nWarning message from PLOTAZEL: \n');
  fprintf('There are no visible satellites.\n');
  fprintf('Returning to calling function without creating a plot.\n');
  p_handle = gcf;
  clf;
  return
else,
  p_handle = gcf;
  clf;
end;

% delete the non visible data base on the mask_vis
az = az(I_vis);
el = el(I_vis);
prn = prn(I_vis);

% Determine how many satellites are involved and plot them 1 at a time
active_sats = [];     % starting value for the active satellites matrix

if nargin >= 3
  start_search = min(prn);  % simple method to find the min and max prn numbers so I can loop
  stop_search = max(prn);   % over them to find the active satellites

  for i = start_search:stop_search           % loop over possible prn numnbers
    I = find(prn == i);                      % find the matches
    if any(I)                                % if there is a match, 
      active_sats = [active_sats prn(I(1))]; % add that prn to the active list
    end % if any(I)
  end % for
else
  prn = ones(size(az));           % set up a defualt value for prn
  active_sats = 1;                % set the number of active satellites to 1
end % if nargin >= 3

avail_colors = ['gmycrb'];
num_colors = length(avail_colors);

for i = 1:size(active_sats,2)                % loop over the active satellites
  I = find(prn == active_sats(i));           % all satellites with the same prn number 
  
  % verify that some satellites were found
  if any(I)
    label_color = avail_colors(rem(i,num_colors) + 1);  % cycle through colors
    % plot the az/el pairs for this satellite
    p_handle = ...
       plotpolr(az(I),el(I),'-',num2str(active_sats(i)),label_color,spoke_label);
    
    % clear out the I variable
    clear I
    
    % make sure that the hold state is on
    if ishold == 0
      hold on
    end % if ishold == 0
    
  end % if any(I)

end % for
title(plot_title,'Color','White');
zoom on       

% set the plot label to be Satellite Sky Plot if it is not already named
if isempty(get(gcf,'Name'))==1,
  set(gcf,'Name','Satellite Sky Plot')
end;

hold off

%%%%% END ALGORITHM CODE %%%%%

% end PLOTAZEL




